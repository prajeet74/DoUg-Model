{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":791828,"sourceType":"datasetVersion","datasetId":119698}],"dockerImageVersionId":30887,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.applications import Xception\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras import layers, models, optimizers\nimport os\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau\nfrom huggingface_hub import push_to_hub_keras\nimport json\nimport shutil\nfrom pathlib import Path\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-21T13:17:33.137158Z","iopub.execute_input":"2025-02-21T13:17:33.137431Z","iopub.status.idle":"2025-02-21T13:17:33.143106Z","shell.execute_reply.started":"2025-02-21T13:17:33.137410Z","shell.execute_reply":"2025-02-21T13:17:33.142041Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Configuration\nIMG_SIZE = 299  # Xception's default input size\nBATCH_SIZE = 32\nEPOCHS = 50\nDATASET_PATH = \"/kaggle/input/stanford-dogs-dataset\"\nIMAGES_PATH = os.path.join(DATASET_PATH, \"images\", \"Images\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T13:17:33.144410Z","iopub.execute_input":"2025-02-21T13:17:33.144743Z","iopub.status.idle":"2025-02-21T13:17:33.155182Z","shell.execute_reply.started":"2025-02-21T13:17:33.144712Z","shell.execute_reply":"2025-02-21T13:17:33.154553Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ndef parse_breed_name(folder_name):\n    \"\"\"Extract breed name from folder name (e.g., 'n02085620-Chihuahua' -> 'Chihuahua')\"\"\"\n    return folder_name.split('-')[1]\n\ndef prepare_data():\n    \"\"\"Prepare train/validation splits while maintaining folder structure\"\"\"\n    # Get all breed folders\n    breed_folders = [f for f in os.listdir(IMAGES_PATH) if os.path.isdir(os.path.join(IMAGES_PATH, f))]\n    \n    # Create train and validation directories\n    train_dir = Path('processed_dataset/train')\n    valid_dir = Path('processed_dataset/valid')\n    train_dir.mkdir(parents=True, exist_ok=True)\n    valid_dir.mkdir(parents=True, exist_ok=True)\n    \n    # Dictionary to store class mapping\n    class_mapping = {}\n    \n    for i, breed_folder in enumerate(sorted(breed_folders)):\n        breed_path = os.path.join(IMAGES_PATH, breed_folder)\n        breed_name = parse_breed_name(breed_folder)\n        class_mapping[breed_folder] = {'name': breed_name, 'index': i}\n        \n        # Get all images for this breed\n        images = [f for f in os.listdir(breed_path) if f.endswith('.jpg')]\n        \n        # Split into train/validation\n        train_images, valid_images = train_test_split(\n            images, test_size=0.2, random_state=42\n        )\n        \n        # Create breed directories in train and validation\n        (train_dir / breed_folder).mkdir(exist_ok=True)\n        (valid_dir / breed_folder).mkdir(exist_ok=True)\n        \n        # Copy images to respective directories\n        for img in train_images:\n            shutil.copy2(\n                os.path.join(breed_path, img),\n                str(train_dir / breed_folder / img)\n            )\n        for img in valid_images:\n            shutil.copy2(\n                os.path.join(breed_path, img),\n                str(valid_dir / breed_folder / img)\n            )\n    \n    return class_mapping, str(train_dir), str(valid_dir)\n\ndef create_model(num_classes):\n    base_model = Xception(\n        weights='imagenet',\n        include_top=False,\n        input_shape=(IMG_SIZE, IMG_SIZE, 3)\n    )\n    \n    base_model.trainable = False\n    \n    model = models.Sequential([\n        base_model,\n        layers.GlobalAveragePooling2D(),\n        layers.Dropout(0.5),\n        layers.Dense(1024, activation='relu'),\n        layers.Dropout(0.3),\n        layers.Dense(num_classes, activation='softmax')\n    ])\n    \n    return model\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T13:17:33.156621Z","iopub.execute_input":"2025-02-21T13:17:33.156875Z","iopub.status.idle":"2025-02-21T13:17:33.170028Z","shell.execute_reply.started":"2025-02-21T13:17:33.156856Z","shell.execute_reply":"2025-02-21T13:17:33.169249Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ndef setup_data_augmentation():\n    train_datagen = ImageDataGenerator(\n        rescale=1./255,\n        rotation_range=20,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest'\n    )\n    \n    valid_datagen = ImageDataGenerator(\n        rescale=1./255\n    )\n    \n    return train_datagen, valid_datagen\n\ndef prepare_data_generators(train_datagen, valid_datagen, train_dir, valid_dir):\n    train_generator = train_datagen.flow_from_directory(\n        train_dir,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical'\n    )\n    \n    validation_generator = valid_datagen.flow_from_directory(\n        valid_dir,\n        target_size=(IMG_SIZE, IMG_SIZE),\n        batch_size=BATCH_SIZE,\n        class_mode='categorical'\n    )\n    \n    return train_generator, validation_generator\n\ndef train_model(model, train_generator, validation_generator):\n    callbacks = [\n        ModelCheckpoint(\n            'best_model.keras',\n            monitor='val_accuracy',\n            mode='max',\n            save_best_only=True,\n            verbose=1\n        ),\n        EarlyStopping(\n            monitor='val_loss',\n            mode='min',\n            patience=5,\n            verbose=1\n        ),\n        ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.1,\n            patience=3,\n            min_lr=1e-6,\n            verbose=1\n        )\n    ]\n    \n    model.compile(\n        optimizer=optimizers.Adam(learning_rate=1e-4),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    \n    history = model.fit(\n        train_generator,\n        epochs=EPOCHS,\n        validation_data=validation_generator,\n        callbacks=callbacks\n    )\n    \n    return model, history\n\ndef fine_tune_model(model, train_generator, validation_generator):\n    # Unfreeze the last few layers\n    base_model = model.layers[0]\n    base_model.trainable = True\n    \n    for layer in base_model.layers[:-30]:\n        layer.trainable = False\n    \n    model.compile(\n        optimizer=optimizers.Adam(learning_rate=1e-5),\n        loss='categorical_crossentropy',\n        metrics=['accuracy']\n    )\n    \n    callbacks = [\n        ModelCheckpoint(\n            'best_finetuned_model.keras',\n            monitor='val_accuracy',\n            mode='max',\n            save_best_only=True,\n            verbose=1\n        ),\n        EarlyStopping(\n            monitor='val_loss',\n            mode='min',\n            patience=5,\n            verbose=1\n        ),\n        ReduceLROnPlateau(\n            monitor='val_loss',\n            factor=0.1,\n            patience=3,\n            min_lr=1e-6,\n            verbose=1\n        )\n    ]\n    \n    history = model.fit(\n        train_generator,\n        epochs=20,\n        validation_data=validation_generator,\n        callbacks=callbacks\n    )\n    \n    return model, history\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T13:17:33.170813Z","iopub.execute_input":"2025-02-21T13:17:33.171006Z","iopub.status.idle":"2025-02-21T13:17:33.180791Z","shell.execute_reply.started":"2025-02-21T13:17:33.170989Z","shell.execute_reply":"2025-02-21T13:17:33.180048Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def save_to_huggingface(model, class_mapping):\n#     # Save model configuration\n#     config = {\n#         \"img_size\": IMG_SIZE,\n#         \"num_classes\": len(class_mapping),\n#         \"class_mapping\": class_mapping,\n#         \"preprocessing\": \"normalize_between_0_and_1\"\n#     }\n    \n#     with open(\"config.json\", \"w\") as f:\n#         json.dump(config, f)\n\n#     # Save to Hugging Face\n#     push_to_hub_keras(\n#         model=model,\n#         repo_id=HF_REPO_ID,\n#         token=HF_TOKEN,\n#         config=config,\n#         commit_message=\"Add Stanford Dogs Xception model\"\n#     )\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T13:17:33.181478Z","iopub.execute_input":"2025-02-21T13:17:33.181777Z","iopub.status.idle":"2025-02-21T13:17:33.194928Z","shell.execute_reply.started":"2025-02-21T13:17:33.181749Z","shell.execute_reply":"2025-02-21T13:17:33.194220Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\ndef main():\n    print(\"Preparing dataset...\")\n    class_mapping, train_dir, valid_dir = prepare_data()\n    num_classes = len(class_mapping)\n    \n    print(\"Creating model...\")\n    model = create_model(num_classes)\n    \n    print(\"Setting up data generators...\")\n    train_datagen, valid_datagen = setup_data_augmentation()\n    train_generator, validation_generator = prepare_data_generators(\n        train_datagen, valid_datagen, train_dir, valid_dir\n    )\n    \n    print(\"Starting initial training...\")\n    model, history = train_model(model, train_generator, validation_generator)\n    \n    print(\"Starting fine-tuning...\")\n    model, ft_history = fine_tune_model(\n        model, train_generator, validation_generator\n    )\n    \n    # print(\"Saving model to Hugging Face...\")\n    # save_to_huggingface(model, class_mapping)\n    # print(f\"Model saved to HuggingFace: {HF_REPO_ID}\")\n\nif __name__ == \"__main__\":\n    main()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-21T13:17:33.308530Z","iopub.execute_input":"2025-02-21T13:17:33.308863Z"}},"outputs":[],"execution_count":null}]}